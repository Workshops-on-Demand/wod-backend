# Playbook expects to have a Student0 folder in the directory where the playbook is run
- hosts: localhost
  gather_facts: false
  connection: local
  vars:
    # Change this to the number of copies you want
    capacity: 0
    prefix: /home
    ref: student0
    workshop: OVWorkshop
    dir: TSS
    myrange: 1-{{capacity}}
    parse: "{{ myrange.split('-') }}"
    start: "{{parse[0]}}"
    end: "{% if parse|length > 1 %}{{parse[1]}}{% else %}{{start}}{% endif %}"
    files: []

  tasks: 
    - fail:
        msg: workshop variable is empty ! Fat fingers ?!?
      when: workshop|length == 0

    - name: check variables file exists
      stat:
        path: variables_{{workshop}}.yml
      register: variables_file
    - include_vars:
        file: variables_{{workshop}}.yml
      when: variables_file.stat.exists
  
    # remove any previously created student1/ to studentn/
    - name: remove student dirs
      file: 
        path: "{{prefix}}/student{{item}}/{{dir}}/{{workshop}}"
        state: absent
      loop: "{{range(start|int, end|int +1, 1) | list }}"

    # find all notebooks
    - name: find jupyter notebooks
      find:
        paths: "{{prefix}}/{{ref}}/{{dir}}/{{workshop}}"
        recurse: yes
        patterns: 
          - "*.ipynb"
          - "Variables.ps1"
        excludes: '*-checkpoint.ipynb'
      register: notebooks

    - name: debug
      debug: 
        msg: "{{notebooks.files}}"

    - name: Cleanup Outputs, metadata and execution_count
      shell: |
        jq '(.cells[] | select(has("outputs")) | .outputs) = []
        | (.cells[] | select(has("execution_count")) | .execution_count) = null
        | .cells[].metadata = {}' "{{ item.path }}" | sponge "{{ item.path }}"
      with_items: "{{ notebooks.files }}"
      when: item.path is not search("Variables.ps1")
 
    # copy student0 n times to student1...studentn
    - name: copy master folder
      copy:
        src: "{{prefix}}/{{ref}}/{{dir}}/{{workshop}}/"
        dest: "{{prefix}}/student{{item}}/{{dir}}/{{workshop}}"
        owner: student{{item}}
        group: jupyter
      loop: "{{range(start|int, end|int +1, 1) | list }}"

    # - name: display
    #   debug:
    #     msg: "{{item.0.path | regex_replace('/student0/','/student' + item.1|string + '/')}}"
    #   with_nested: 
    #     - "{{notebooks.files}}"
    #     - "{{range(1, capacity +1, 1) | list }}"
    # Replace $$I with Student ID in notebooks
    - name: student id substitution
      replace:
          path: "{{item.0.path | regex_replace('/'+ref+'/','/student' + item.1|string + '/')}}"
          regexp: \$\$I
          replace: "{{item.1}}"
      with_nested: 
        - "{{notebooks.files}}"
        - "{{range(start|int, end|int +1, 1) | list }}"

    # Replace $$variable_name with whatever is specified in variables.yml that we imported
    - name: variables substitution
      # debug:
      #   msg: 
      #     - Student{{item.2}}/{{item.0.path|basename}}
      #     - \$\${{item.1.varname}}
      #     - "{{ item.1.varsubst[item.2|string] }} "
      replace:
        path: "{{item.0.path | regex_replace('/'+ref+'/','/student' + item.2|string + '/')}}"
        regexp: \$\${{item.1.varname}}
        replace: "{{ item.1.varsubst[item.2|string] }}"
      with_nested: 
        - "{{notebooks.files}}"
        - "{{substitutions}}"
        - "{{range(start|int, end|int +1, 1) | list }}"
      when: substitutions is defined

     
