#!/bin/bash

set -x

source {{ SCRIPTDIR }}/functions.sh

export RTARGET={{ hostvars[inventory_hostname]['IP-WKSHP-Dataspaces'] }}
export JPHOSTEXT={{ hostvars[inventory_hostname]['JPHOSTEXT'] }}

# Start by cleaning up stuff - do it early as after we setup .ssh content
{{ SCRIPTDIR }}/reset-$ws.sh
{{ SCRIPTDIR }}/create-appliance.sh

NAME=dataspaceslab
TMPDIR=/tmp/$stdid/$NAME


mkdir -p $TMPDIR

# Define local variables
echo wid=$wid
APPMIN=`get_range_min $wid`
echo stdid=$stdid
echo APPMIN=$APPMIN
dataspaceshttpport=$(($stdid-$APPMIN+{{ hostvars[inventory_hostname]['HTTPPORT-WKSHP-Dataspaces'] }}))
dataspaceshttpport2=$(($stdid-$APPMIN+{{ hostvars[inventory_hostname]['HTTPPORT2-WKSHP-Dataspaces'] }}))
dataspacesport=$(($stdid-$APPMIN+{{ hostvars[inventory_hostname]['DATASPACESPORT-WKSHP-Dataspaces'] }}))
dataspacesport2=$(({{ hostvars[inventory_hostname]['DATASPACESPORT2-WKSHP-Dataspaces'] }}))
dataspacesport3=$(({{ hostvars[inventory_hostname]['DATASPACESPORT3-WKSHP-Dataspaces'] }}))
dataspacesport4=$(({{ hostvars[inventory_hostname]['DATASPACESPORT4-WKSHP-Dataspaces'] }}))

cat > $TMPDIR/dockerd-entrypoint.sh << EOF
export DATASPACESHTTPPORT
cd /student/student$stdid/workspace
source ../.bashrc
export PATH="/opt/conda/envs/python37/bin:$PATH"
sh ./initialize.sh
jupyter notebook --ip 0.0.0.0 --port 8899
#tini -g -- start-notebook.sh &
#sleep 3
#jupyter lab list | tail -1 | cut -d'=' -f2 | cut -d' ' -f1 > /student/student$stdid/dataspacetoken
sleep infinity
EOF



# Docker file creation
cat > $TMPDIR/Dockerfile << EOF
FROM ${NAME}:latest
# In order to be able to perform copies
USER root
COPY dockerd-entrypoint.sh /usr/local/bin/
ENTRYPOINT /usr/local/bin/dockerd-entrypoint.sh
RUN mkdir -p /student/student$stdid/workspace/custom_libs
RUN mkdir -p /student/student$stdid/dvc_remote
RUN useradd student$stdid -u $stdid -g 100 -d /student/student$stdid
RUN cp -r /home/jovyan/workspace/* /student/student$stdid/workspace/
RUN cp /home/jovyan/workspace/custom_libs/jupyter_to_dataspace_sync.py /student/student$stdid/workspace/custom_libs/
RUN cp /home/jovyan/workspace/custom_libs/getConnStr.py /student/student$stdid/workspace/custom_libs/
# Remove hard coded values
RUN perl -pi -e "s|http://dataspaces-7.labs.hpecorp.net|http://notebooks3.hpedev.io:20002|" /student/student$stdid/workspace/custom_libs/getConnStr.py
RUN chown -R student$stdid:users /student/student$stdid
# Unlock the account
RUN perl -pi -e "s|^student$stdid:!:|student$stdid:\$6\$rl1WNGdr\$qHyKDW/prwoj5qQckWh13UH3uE9Sp7w43jPzUI9mEV6Y1gZ3MbDDMUX/1sP7ZRnItnGgBEklmsD8vAKgMszkY.:|" /etc/shadow
# In case we need sudo
#RUN echo "student$stdid   ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers
WORKDIR /student/student$stdid
USER student$stdid
ARG NB_USER student$stdid
ARG NB_UID $stdid
ARG GIT_USER_NAME student$stdid
ARG GIT_USER_EMAIL student$stdid@hpedev.io
ARG DVC_REMOTE_URL /student/student$stdid/dvc_remote
#ARG GIT_REMOTE_URL=git@github.hpe.com:jabali-searcot-karanam/cmf_notebook_dspc7.git
#ARG GIT_BRANCH=master
ENV HTTPPORT $dataspaceshttpport
#RUN /opt/conda/bin/jupyter-nbconvert --clear-output --inplace /student/student$stdid/*.ipynb
EOF


# Docker-compose file creation
# Look at https://stackoverflow.com/questions/34264348/docker-inside-docker-container
# and http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
# For security consider using https://github.com/nestybox/sysbox
cat > $TMPDIR/docker-compose.yml << EOF
#Following https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html
#And https://jupyter-docker-stacks.readthedocs.io/en/latest/using/common.html#docker-options
version: '3.5'
services:
  $NAME$stdid:
    build:
      dockerfile: Dockerfile
      context: ./
    volumes:
#      - /student/student$stdid/workspace:/student/student$stdid/workspace
      - /student/student$stdid/dvc_remote:/student/student$stdid/dvc_remote
      - /student/student$stdid/.ssh:/student/student$stdid/.ssh
    networks:
      - dataspaces-net
    ports:
      - "$dataspaceshttpport:8888"
      - "$dataspaceshttpport2:8899"
    #user: root
    environment:
      #- GRANT_SUDO=yes
      - DOCKER_STACKS_JUPYTER_CMD=lab
      - JUPYTER_TOKEN=$randompw
      - JUPYTER_ENABLE_LAB=yes
      #- DB_URL=mysql://db:33060
      #- DB_PASSWORD=${MYSQL_ROOT_PASSWORD} #from .env file
    networks:
      - dataspaces-net
    extra_hosts:
      - "$JPHOSTEXT:$RTARGET"
networks:
  dataspaces-net:

EOF
cat > $TMPDIR/launch-$NAME << EOF
#!/bin/bash
cd $TMPDIR
docker-compose up --build -d
EOF


# Copy content and start container
ssh -q {{ NOCHECKSSH }} $RTARGET mkdir -p $TMPDIR
scp -q {{ NOCHECKSSH }} $TMPDIR/Dockerfile $TMPDIR/docker-compose.yml $TMPDIR/launch-$NAME $TMPDIR/dockerd-entrypoint.sh $RTARGET:$TMPDIR
ssh -q {{ NOCHECKSSH }} $RTARGET chmod 755 $TMPDIR $TMPDIR/dockerd-entrypoint.sh
ssh -q {{ NOCHECKSSH }} $RTARGET chmod 644 $TMPDIR/docker-compose.yml $TMPDIR/launch-$NAME $TMPDIR/Dockerfile
ssh -q {{ NOCHECKSSH }} $RTARGET sudo su - student$stdid -c \'bash $TMPDIR/launch-$NAME\'

# ssh to get token from running container
container_id=$(ssh -q {{ NOCHECKSSH }} $RTARGET docker ps -aqf "name=$NAME$stdid")
# We need time to let jupyterhub start before getting token
sleep 5
#ssh -q {{ NOCHECKSSH }} $RTARGET "docker cp $container_id:/student/student$stdid/dataspacetoken $TMPDIR"
#scp -q {{ NOCHECKSSH }} $RTARGET:$TMPDIR/dataspacetoken $TMPDIR

# ansible-vault to store it in the pass file creating a MLTOK ansible variable
if [ ! -d "{{ JUPPROC }}/ansible-jupyter/{{ PBKDIR }}/pass" ]; then
	mkdir -p "{{ JUPPROC }}/ansible-jupyter/{{ PBKDIR }}/pass"
fi
ansible-vault encrypt_string --vault-password-file "{{ JUPPROC }}/ansible-jupyter/vault_secret" $dataspaceshttpport2 --name "'DATASPACESHTTPPORT2'" >> "{{ JUPPROC }}/ansible-jupyter/{{ PBKDIR }}/pass/variables_${w}_${stdid}.yml"
ansible-vault encrypt_string --vault-password-file "{{ JUPPROC }}/ansible-jupyter/vault_secret" $dataspaceshttpport --name "'DATASPACESHTTPPORT'" >> "{{ JUPPROC }}/ansible-jupyter/{{ PBKDIR }}/pass/variables_${w}_${stdid}.yml"
ansible-vault encrypt_string --vault-password-file "{{ JUPPROC }}/ansible-jupyter/vault_secret" $dataspacesport --name "'DATASPACESPORT'" >> "{{ JUPPROC }}/ansible-jupyter/{{ PBKDIR }}/pass/variables_${w}_${stdid}.yml"
ansible-vault encrypt_string --vault-password-file "{{ JUPPROC }}/ansible-jupyter/vault_secret" $dataspacesport2 --name "'DATASPACESPORT2'" >> "{{ JUPPROC }}/ansible-jupyter/{{ PBKDIR }}/pass/variables_${w}_${stdid}.yml"
ansible-vault encrypt_string --vault-password-file "{{ JUPPROC }}/ansible-jupyter/vault_secret" $dataspacesport4 --name "'DATASPACESPORT4'" >> "{{ JUPPROC }}/ansible-jupyter/{{ PBKDIR }}/pass/variables_${w}_${stdid}.yml"

#create user on dscp-project container
cat > $TMPDIR/register_user << EOF
#!/bin/bash
curl -X POST -H "Content-Type: application/json" --data '{"email":"student$stdid@hpedev.io","first_name":"$stdid","last_name":"Student","password":"$randompw"}' --location  http://$RTARGET:$dataspacesport3/project/v1alpha1/register_user/
EOF
#chmod 755 $TMPDIR/register_user
scp -q {{ NOCHECKSSH }} $TMPDIR/register_user ${RTARGET}:$TMPDIR
ssh -q {{ NOCHECKSSH }} $RTARGET chmod 755 $TMPDIR/register_user
ssh -q {{ NOCHECKSSH }} $RTARGET $TMPDIR/register_user



# Cleanup
#ssh -q {{ NOCHECKSSH }} $RTARGET sudo rm -rf $TMPDIR
rm -rf $TMPDIR
