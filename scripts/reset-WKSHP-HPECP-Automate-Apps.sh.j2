#!/bin/bash

cd /student/student$stdid/$w
echo " This script resets the WKSHP-HPECP-Automate-Apps  Workshop content for:" student$stdid
# associated to studentXY.
##
echo "Setting  environment variables to help cleanup"
##
student="student$stdid" # your Jupyter Notebook student Identifier (i.e.: student<xx>)
username="demoadmin" # your HPE CP tenant login credentials - username 
password="CleanUpDISCO2020" # your HPE CP tenant login credentials - password
##
## fixed environment variables setup by the HPE CP lab administrator
##
controller_endpoint="{{ HPEECPGWNAME }}:8080"
gateway_host="{{ HPEECPGWNAME }}"
tenantname="K8sHackTenant"
k8sClusterId="3"  #this is the K8s Cluster Id provided by the HPE CP admisnistrator and assigned to your K8s tenant.

echo "your operation context is:" $username "on tenant" $tenantname 


##Authenticate as a Tenant admin in the specified tenant:
sessionlocation=$(curl -k -i -s --request POST "https://${controller_endpoint}/api/v2/session" \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--data-raw '{ "name": "'"$username"'", "password": "'"$password"'", "tenant_name": "'"$tenantname"'" }' | grep Location | awk '{print $2}' | tr -d '\r') #we remove any cr that might exist
echo "This is your session location: " $sessionlocation
SessionId=$(echo $sessionlocation | cut -d'/' -f 5) # extract sessionId for later, for logout
echo "This is your session_Id:" $SessionId

echo "Getting the Kubeconfig file for the student tenant working context:"
curl -k -s --request GET "https://${controller_endpoint}/api/v2/k8skubeconfig" \
--header "X-BDS-SESSION: $sessionlocation" \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' > ${student}_kubeconfig
cat ${student}_kubeconfig

echo "Define the Kubeconfig file as a shell environment variable:"
##define the Kubeconfig file as a shell environment variable to tell kubectl where to look for the kubeconfig file
export KUBECONFIG="${student}_kubeconfig"
echo $KUBECONFIG

echo "Verifying the working tenant context:"
kubectl config current-context

echo "Deleting Services"
kubectl delete standalone $student
kubectl delete -f mySplunkService.yaml


##Close the login session
echo "logging out"

curl -k -i -s --request DELETE "https://${controller_endpoint}/api/v2/session/${SessionId}" \
--header "X-BDS-SESSION: $sessionlocation" \
--header 'Accept: application/json' \
--header 'Content-Type: application/json'
###The status 204 No Content means the session object has been deleted.

echo "Deleting the kubeconfig file"
sudo rm -f ${student}_kubeconfig mySplunkService.yaml 0_splunkStandAlone.yaml

