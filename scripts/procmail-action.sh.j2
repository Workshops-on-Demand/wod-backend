#!/bin/bash
#
# Script to be called from procmail to create student setup
# Expect mapping as parameters and workshop list on standard input
#
# (c) Bruno Cornec <bruno.cornec@hpe.com>, Hewlett Packard Development
# (c) Frederic Passeron <frederic.passeron@hpe.com>, Hewlett Packard Development
#
# Released under the GPLv2 License
#
set -e
set -x

# Defines JUPPROC
source {{ SCRIPTDIR }}/wod.sh
source {{ SCRIPTDIR }}/random.sh
source {{ SCRIPTDIR }}/functions.sh
#
# Main part
#
# Variables declaration
#

# endpoint variable - Has to be global
export APIENDPOINT={{ APIENDPOINT }}
APIUSER={{ APIUSER }}
APIPWD={{ APIPWD }}
export USER=$LOGNAME

# Main of script
action=$1
echo "we are working on "$action
if [ _"$1" = _"" ]; then
	echo "Syntax: procmail-action.sh <CREATE|CLEANUP|RESET|PURGE> <student id> <user id>"
	echo "ACTION is mandatory"
	exit -1
fi
shift

# Check action
if [ $action != "CREATE" ]  && [ $action != "CLEANUP" ]  && [ $action != "RESET" ] && [ $action != "PURGE" ]; then
	echo "Syntax: procmail-action.sh <CREATE|CLEANUP|RESET|PURGE> <student id> [<user id>]"
	echo "A correct ACTION is mandatory"
	exit -1
fi

export stdid=$1
if [ _"$1" = _"" ]; then
	echo "Syntax: procmail-action.sh <CREATE|CLEANUP|RESET|PURGE> <student id> [<user id>]"
	echo "Student Username id is mandatory"
	exit -1
fi
shift

export std0="$JUPNOBO"
export stddir="{{ STUDDIR }}/student$stdid"
export accessToken=`get_session_token`

# for PURGE we just need stddir and stdid
if [ "$action" = "PURGE" ]; then
    curl --header "Authorization: token {{ JPHUBTOKEN }}" \
            --location \
            --request DELETE \
            "{{ JPHUBAPISRV }}/hub/api/users/student$stdid/server"
	generate_randompwd
	erase_student
    exit 0
fi

w=`get_workshop_name`
# We differentiate Challenges from Workshop by creating a MODEWS variable
# Later passed as an ansible variable as well to process the notebook
ws=`echo $w |sed 's/CHLG/WKSHP/'`
if [ $ws != $w ]; then
	MODEWS="CHLG"
else
	MODEWS="WKSHP"
fi
# If that doesn't fail, then export the workshop name
export w
export ws
export wid=`get_workshop_id $w`

# Handle CREATE and CLEANUP first
if [ $action != "RESET" ]; then
	teststdid $stdid

	userid=$1
	if [ _"$1" = _"" ]; then
		echo "Syntax: procmail-action.sh <CREATE|CLEANUP> <student id> <user id>"
		echo "Customer id is mandatory"
		exit -1
	fi

	cd $std0

	# Read workshop list on stdin
	if [ -d "$stddir" ]; then
		# Now change passwd
		generate_randompwd

		# Some Notebooks need an LDAP passwd update as well
		if [ _"`get_ldap_status $wid`" != _"false" ]; then
			update_ldap_passwd
			create_var_passwd
		fi
		# Some Notebooks need to get the passwd for the user
		if [ _"`get_varpass_status $wid`" != _"false" ]; then
			create_var_passwd
		fi

		if [ "$action" = "CREATE" ]; then
			erase_student
			compile=`get_compile_status $wid`
			if [ _"$compile" = _"null" ]; then
                                compile=""
                        fi
			if [ _"$compile" != _"" ]; then
				ansible-playbook $JUPPROC/ansible/ansible_compile_scripts.yml -i $JUPPROC/ansible/inventory --limit {{ PBKDIR }} -e "STDID=$stdid COMPILE=\"$compile\""
			fi
			if [ -x "$JUPPROC/scripts/create-$ws.sh" ]; then
				echo "Setup workshop $w Backend"
				$JUPPROC/scripts/create-$ws.sh
			fi
			echo "Copying workshop $w content into target student dir $stddir"
			ansible-playbook $JUPPROC/ansible/ansible_copy_folder.yml -i $JUPPROC/ansible/inventory --limit {{ PBKDIR }} -e "MODEWS=$MODEWS DIR=  CHALLENGE=$w WORKSHOP=$ws STDID=$stdid" --vault-password-file $JUPPROC/ansible-jupyter/vault_secret
			if [ -x "$JUPPROC/scripts/post-copy-$ws.sh" ]; then
				echo "Perform post actions for workshop $w"
				$JUPPROC/scripts/post-copy-$ws.sh
			fi
			# $w on purpose as stdid is unique, so name is not important
			rm -f {{ ansible_env.HOME }}/tmp/ac-student$stdid.yml $JUPPROC/ansible-jupyter/{{ PBKDIR }}/pass/variables_${w}_${stdid}.yml
		fi

		# Increment the student ID by Number of jupyter students in students table
		# Only for API Calls 
		dbstdid=$((stdid+{{ BASESTDID }}))

		# Instead do 2 API calls here, one for passwd change, one for status change
		##Update Password
		curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
			 --request PUT \
			 --data '{"password":"'$randompw'"}' \
			 "$APIENDPOINT/student/$dbstdid"

		if [ "$action" = "CREATE" ]; then
			##Update customer status to active
			curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
				 --request PUT \
				 --data '{"active": "true"}' \
				 "$APIENDPOINT/customer/$userid"
			##Start Student jupyterhub dedicated server
			curl --header "Content-Type: application/json" \
				 --header "Authorization: token {{ JPHUBTOKEN }}" \
				 --location \
				 --request POST \
				 --data '{}' \
                     "{{ JPHUBAPISRV }}/hub/api/users/student$stdid/server"

		elif [ "$action" = "CLEANUP" ]; then
			# Launch cleanup script if any
			if [ -x "$JUPPROC/scripts/cleanup-$ws.sh" ]; then
				echo "Cleaning up workshop $w"
				$JUPPROC/scripts/cleanup-$ws.sh
			fi
			# Keep completion status
			completion=`get_wod_completion_ratio`

			# Update completion ratio figure in customer table
			 curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
              			 --request PUT \
              			 --data '{"completionPercentage": "'$completion'"}' \
               			"$APIENDPOINT/customer/$userid"


			#Delete Student jupyterhub dedicated server
			curl --header "Authorization: token {{ JPHUBTOKEN }}" \
				--location \
			--request DELETE \
                         "{{ JPHUBAPISRV }}/hub/api/users/student$stdid/server"

			#Get Worshop reset status to determine if users should be updated to inactive or not
			if [ _"`get_reset_status $wid`" = _"false" ]; then
				##Update student status to inactive
				curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
					 --request PUT \
					 --data '{"assigned":"false"}' \
					 "$APIENDPOINT/student/$dbstdid"
				# Possible to clean dirs because no RESET so no file needed in that dir
	 			erase_student
				cleanup_processes_student
			else
				curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
					 --request PUT \
					 --data '{"assigned":"true"}' \
					 "$APIENDPOINT/student/$dbstdid"
	 			# set customer  to inactive by default for all workshops
				curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
					     --request PUT \
					     --data '{"active": "false"}' \
					     "$APIENDPOINT/customer/$userid"
			fi
		else
			echo "Unknown action $action"
		fi
	else
		echo "Student directeory not found for $stddir"
	fi

elif [ "$action" = "RESET" ]; then
	# Avoid concurrency with CLEANUP phase
	sleep 10
	if [ _"`get_reset_status $wid`" = _"true" ]; then
		if [ $(echo $stdid | grep -c ',') -ne 0 ]; then
			# We have a range to manage
			min=`echo $stdid | cut -d, -f1`
			teststdid $min
			max=`echo $stdid | cut -d, -f2`
			teststdid $max
			min=$((min+{{ BASESTDID }}))
			max=$((max+{{ BASESTDID }}))
			i=$max
			j=$max
			cap=$((max-min+1))

			# API call to Now reset capacity to original value
	        	curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
				--request PUT \
				--data '{"capacity":"'$cap'"}' \
				"$APIENDPOINT/workshop/$wid"
		else
			teststdid $stdid
			# We have a single value to manage
			i=$((stdid+{{ BASESTDID }}))
			j=$((stdid+{{ BASESTDID }}))
			min=$((stdid+{{ BASESTDID }}))
		fi

		while [ $i -ge $min ]; do
			# Then call the reset script
			# Now change passwd as sometimes the reset script needs to have it
			stdid=$((i-{{ BASESTDID }}))
			generate_randompwd
	
			# Some Notebooks need an LDAP passwd update as well
			if [ _"`get_ldap_status $wid`" != _"false" ]; then
				update_ldap_passwd
			fi
			((i=i-1))
		done

		# Get Workshop backend reset status
		if [ ! -x "$JUPPROC/scripts/reset-$ws.sh" ]; then
			echo "Unable to reset backend for workshop $w, no script available"
			exit -1
		else
			echo "Reseting workshop $w Backend"
			$JUPPROC/scripts/reset-$ws.sh
		fi

		while [ $j -ge $min ]; do
			# API call
			# Update student status to unassigned
			curl --header "x-access-token:$accessToken" --header "Content-Type: application/json" \
				--request PUT \
				--data '{"assigned":"false"}' \
				"$APIENDPOINT/student/$j"
			stdid=$((j-{{ BASESTDID }}))
			stddir="{{ STUDDIR }}/student$stdid"
			erase_student
			cleanup_processes_student
			((j=j-1))
		done
	fi

else
	echo "Unknown action $action"
fi
echo "end of procmail-action for student $stdid (passwd $randompw) with workshop $w with action $action at `date`"
