#!/bin/bash
#
# Functions called from other management scripts
#
# (c) Bruno Cornec <bruno.cornec@hpe.com>, Hewlett Packard Development
# (c) Frederic Passeron <frederic.passeron@hpe.com>, Hewlett Packard Development
#
# Released under the GPLv2 License
#
set -e
set -x

# This function returns the id number in the workshop DB when passed the workshop name
get_workshop_id() {

	id=0
	for i in `curl -s --header "Content-Type: application/json" "$APIENDPOINT/workshops" | jq -r '.[].id'`; do
		name=`curl -s --header "Content-Type: application/json" "$APIENDPOINT/workshops/$i" | jq .notebook | sed 's/"//g'`
		if [ _"$name" = _"$1" ]; then
			id=$i
			break
		fi
	done
	if [ id = 0 ]; then
		echo "Workshop ID not found remotely for $1"
		exit -1
	fi
	echo "$id"
}

# This function returns the status of the reset boolean for the workshop id given as parameter
get_reset_status() {

	ret=`curl -s --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.reset'`
	echo "$ret"
}

# This function returns the status of the need of LDAP setup for the workshop id given as parameter
get_ldap_status() {

	ret=`curl -s --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.ldap'`
	echo "$ret"
}

# This function updates the LDAP passwd with $randompw for the student under management (using $stdid)
update_ldap_passwd() {

	rm -f /tmp/ldif.$$
	cat > /tmp/ldif.$$ << EOF
#modify user password
dn: uid=student$stdid,ou=People,dc=hpedevlab,dc=net
changetype: modify
replace: userPassword
userPassword: $randompw
EOF
	ldapmodify -D "cn=Directory Manager" -w {{ LDAPPWD }} -p {{ LDAPPORT }} -h {{ LDAPSRV.split(' ')[1] }} -x -f /tmp/ldif.$$
	rm -f /tmp/ldif.$$
}

# This function creates a variable file in which password is stored fro athe ansble playbook to handle and use to substitue $$PASSWD in notebook the LDAP passwd with $randompw
create_var_passwd() {
  
	ansible-vault encrypt_string --vault-password-file $JUPPROC/ansible-jupyter/vault_secret $randompw --name "'PASSSTU'" > $JUPPROC/ansible-jupyter/$PBKDIR/variables_${w}_pass.yml
}

# This function retuns the workshop name from the mail body
get_workshop_name() {

	read w
	if [ ! -n "$w" ]; then
		echo "Missing workshop name in the e-mail body"
		exit -1
	fi
	if [ ! -d "$std0/$w" ]; then
		echo "Non-existant workshop $w"
		exit -1
	fi
	echo "$w"
}

erase_student() {

	if [ _"$stddir" != _"" ]; then
		echo "Erasing target student dir $stddir content"
		sudo rm -rf $stddir/* $stddir/.??*
		cp -a /etc/skel/.??* $stddir
		sudo chown student${stdid}:student${stdid} $stddir/.??*
	fi
}

#this function creates a random password for a user, it is used for local and ldap users'passwords.
generate_randompwd() {

	if [ _"$RANDOMPW" != _"" ]; then
		export randompw=$RANDOMPW
	else
		export randompw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
	fi
	echo "student$stdid:$randompw" | sudo chpasswd
}
