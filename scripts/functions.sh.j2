#!/bin/bash
#
# Functions called from other management scripts
#
# (c) Bruno Cornec <bruno.cornec@hpe.com>, Hewlett Packard Development
# (c) Frederic Passeron <frederic.passeron@hpe.com>, Hewlett Packard Development
#
# Released under the GPLv2 License
#
set -e
#set -x

# This function fetches an accessToken using user moderator credentials and open a session
get_session_token() {

	ret=`curl -s --location --request POST "$APIENDPOINT/login" \
			--header 'Content-Type: application/json' \
			--data "{\"username\":\"$APIUSER\",\"password\":\"$APIPWD\"}" | jq -r '.accessToken'`
        echo "$ret"

}


# This function returns the id number in the workshop DB when passed the workshop name
get_workshop_id() {

	id=0
	for i in `curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops" | jq -r '.[].id'`; do
		name=`curl -s --header "x-access-token:$accessToken"  --header "Content-Type: application/json" "$APIENDPOINT/workshops/$i" | jq .notebook | sed 's/"//g'`
		if [ _"$name" = _"$1" ]; then
			id=$i
			break

		fi
	done
	if [ $id = 0 ]; then
		echo "Workshop ID not found remotely for $1"
		exit -1
	fi
	echo "$id"
}

# This function exits when the student id is not in the correct range
teststdid() {
	
	# We need to ensure that we've got a correct id as parameter if needed
	MIN={{ USERMIN }}
	MAX={{ USERMAX }}

	if [ $1 -lt $MIN ] ||  [ $1 -gt $MAX ]; then
                echo "Student id ($1) should be between $MIN and $MAX"
                exit -1
        fi
}

# This function returns the status of the reset boolean for the workshop id given as parameter
get_reset_status() {

	ret=`curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.reset'`
	echo "$ret"
}

# This function returns the status of the beta  boolean for the workshop id given as parameter
get_beta_status() {

        ret=`curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.beta'`
        echo "$ret"
}

# This function returns the status of the need of LDAP setup for the workshop id given as parameter
get_ldap_status() {

	ret=`curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.ldap'`
	echo "$ret"
}


# This function returns the status of the need of Var Pass setup for the workshop id given as parameter
get_varpass_status() {

	ret=`curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.varpass'`
	echo "$ret"
}

# This function returns the status of the need of compiled scripts for the workshop id given as parameter
get_compile_status() {

	ret=`curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.compile'`
	echo "$ret"
}

# This function returns the min of the range of the users booked for the workshop id given as parameter
get_range_min() {

	ret=`curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.range[0]'`
	echo "$ret"
}

# This function returns the max of the range of the users booked for the workshop id given as parameter
get_range_max() {

	ret=`curl -s --header "x-access-token:$accessToken" --header "Content-Type: application/json" "$APIENDPOINT/workshops/$1" | jq -r '.range[1]'`
	echo "$ret"
}

# This function generates a  GreenLake Central Token to be used for GreenLake Functions to reset Workshop Environment
generate_greenlake_reset_token() {

	export greenlake_reset_token=$(curl -s --location --request POST \
'{{ GREENLAKE_IAM_API_URL }}/oauth2/{{ GREENLAKE_TENANT_ID }}/{{ GREENLAKE_IAM_ID }}/v1/token' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'client_id={{ GREENLAKE_RESET_CLIENTID }}' \
--data-urlencode 'client_secret={{ GREENLAKE_RESET_CLIENTSECRET }}' \
--data-urlencode 'grant_type=client_credentials' \
--data-urlencode 'scope=hpe-tenant'| jq -r '.access_token')
}



# This function generates a  GreenLake Central Token to be used for other GreenLake Functions like user creation or deletion
old_generate_greenlake_token() {

	 export greenlake_token=$(curl -s --location --request POST \
		 {{ GREENLAKE_IAM_API_URL }}/oauth2/{{ GREENLAKE_TENANT_ID }}/{{ GREENLAKE_IAM_ID }}/v1/token \
  -H 'Content-Type: application/json' \
  -d '{
    "client_id": "{{ GREENLAKE_CLIENTID }}",
    "client_secret": "{{ GREENLAKE_CLIENTSECRET }}",
    "grant_type": "client_credentials",
    "scope": "hpe-tenant"
}' | jq -r '.access_token')

}


generate_greenlake_token() {

	export greenlake_token=$(curl -s -X POST '{{ GREENLAKE_IAM_API_URL }}/oauth2/{{ GREENLAKE_TENANT_ID }}/{{ GREENLAKE_IAM_ID }}/v1/token' \
		--header 'Content-Type: application/x-www-form-urlencoded' \
		--data-urlencode 'client_id={{ GREENLAKE_CLIENTID }}' \
		--data-urlencode 'client_secret={{ GREENLAKE_CLIENTSECRET }}' \
		--data-urlencode 'grant_type=client_credentials' \
		--data-urlencode 'scope=hpe-tenant' |jq -r .access_token)
}


# This function creates a  GreenLake Central user using studentid and  password (stdid and randompwd) for GreenLake Based Workshops
create_greenlake_user() {

        # Get Studentid Group id API Call
         ret1=`curl -s --header "Authorization: $greenlake_token" --header "Content-Type: application/json" "{{ GREENLAKE_IAM_API_URL }}/scim/v2/Groups?filter=displayName%20sw%20HPEDEV-HackShack-vmaas-workshop-student$stdid" |jq -r .Resources[].id`
         echo "Group Student$stdid id : $ret1"


        # Create Studentxxx and Get glc_user_id API Call - double randompw is NORMAL
        ret2=`curl -s --location --request POST --header "Authorization: $greenlake_token" --header "Content-Type: application/scim+json" \
                   --data "{ \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:ietf:params:scim:schemas:extensions:hpe-greenlake:2.0:UserCreate\" ], \"userName\": \"student$stdid@hpedev.io\", \"password\": \"$randompw$randompw\", \"displayName\": \"student$stdid\", \"name\": { \"familyName\": \"student$stdid\", \"givenName\": \"student$stdid\" }, \"emails\": [{ \"primary\": true, \"type\": \"PRIMARY\", \"value\": \"student$stdid@hpedev.io\"}, {\"primary\": false, \"type\": \"SECONDARY\", \"value\": \"hpedev.hackshack@hpe.com\" }], \"urn:ietf:params:scim:schemas:extensions:hpe-greenlake:2.0:UserCreate\": { \"sendEmail\": false, \"changePassword\": false } }" "{{ GREENLAKE_IAM_API_URL }}/scim/v2/Users" |jq -r '.id'`
        echo "Student$stid GreenLake user_id: $ret2"

        # Add Studentxxx  to Group Studentxxx using  glc_user_id  Group Studentxxx id  API Call
        ret3=`curl -s --location --request PATCH --header "Authorization: $greenlake_token" --header 'Content-Type: application/scim+json' \
		--data "{ \"schemas\": [ \"string\" ], \"operations\": [{\"op\": \"add\", \"path\": \"members\", \"value\": \"$ret2\"}]}" "{{ GREENLAKE_IAM_API_URL }}/scim/v2/Groups/$ret1"`
        echo "$ret3"

}

# This function deletes a  GreenLake Central user using studentid and  password (stdid and randompwd) for GreenLake Based Workshops
delete_greenlake_user() {

        # Get Studentid from student list
        ret1=`curl -s --header "Authorization: $greenlake_token" --header "Content-Type: application/json" "{{ GREENLAKE_IAM_API_URL }}//scim/v2/Users?count=200&filter=userName%20sw%20%22student$stdid%40hpedev.io%22&sortBy=name.givenName&sortOrder=asc" |jq -r  .Resources[].id`
        echo "Student$stid GreenLake user_id: $ret1"

        # Deactivate student using  Studentid
        ret2=`curl -s --location --request POST --header "Authorization: $greenlake_token" --header "Content-Type: application/scim+json" --data '[object DeactivateUser]' "{{ GREENLAKE_IAM_API_URL }}/scim/v2/Users/$ret1/lifecycle/deactivate?sendEmail=false" `
        echo "$ret2"


        # Delete student using Studentid
        ret3=`curl -s --location --request  DELETE --header "Authorization: $greenlake_token" --header "Content-Type: application/json" "{{ GREENLAKE_IAM_API_URL }}/scim/v2/Users/$ret1"`
        echo "$ret3"
}



# This function creates a  GreenLake Central Student API Client using studentid and  password (stdid and randompwd) for GreenLake Based Workshops
create_student_api_client() {
        
	# Get the role id for the student to be used later for role assignment while creating the API CLient
	ret1=$(curl -s -X GET --header "Authorization: Bearer $greenlake_token" "{{ GREENLAKE_API_CLIENT_URL}}/v1alpha2/roles?name=HPE%20-%20student$stdid&operation=assign" | jq -r .members[].id)
	echo "Student$stdid role id: $ret1"
		

	# Create the dedicated API Client for the student and retrieve client_id and client_secret
        read ret2 ret3 < <(echo `curl -s -X POST --header "Authorization: Bearer $greenlake_token" --header "Content-Type: application/json" "{{ GREENLAKE_API_CLIENT_URL}}/v1beta1/clients" --data "{ \"client_name\": \"AC-Student$stdid\", \"client_description\": \"API Client for Student$stdid\"}" | jq -r '.client_id, .client_secret'`)
        echo "API Client id for Student$stdid id: $ret2"
        echo "API Client secret for Student$stdid id: $ret3"
	cat > {{ ansible_env.HOME }}/tmp/ac-student$stdid.yml << EOF
STUDENT_CLIENTID: $ret2
STUDENT_CLIENTSECRET: $ret3
EOF

        # Assign Studentxxx  Role to API Client Studentxxx using  student role_id 
	ret4=$(curl -s -X POST --header "Authorization: $greenlake_token" --header "Content-Type: application/json" "{{ GREENLAKE_API_CLIENT_URL}}/v1alpha2/assignments" --data "{ \"subjects\": [ \"clients/$ret2\" ], \"roleId\": \"$ret1\", \"spaceId\": \"{{ GREENLAKE_HACKSHACK_SPACE_ID }}\"}")
        echo "Student$stid Role Assignment: $ret4"

}


# This function deletes a GreenLake Central Student API Client 
delete_greenlake_student_api_client() {


	# Get the role id for the student to be used later for role assignment while creating the API CLient
        ret1=$(curl -s -X GET --header "Authorization: Bearer $greenlake_token" "{{ GREENLAKE_API_CLIENT_URL}}/v1alpha2/roles?name=HPE%20-%20student$stdid&operation=assign" | jq -r .members[].id)
        echo "Student$stdid role id: $ret1"


	# Get Student Client API id
	ret2=$(curl -X GET --header "Authorization: $greenlake_token" "{{ GREENLAKE_API_CLIENT_URL}}/v1beta1/clients" | jq '.[] | select(.client_name=="AC-Student'$stdid'") | .client_id' | tr -d '"')
	echo "API Client for Student$stdid id: $ret2"
	

	# List Assignment for student API Client
	ret3=$(curl -X GET --header "Authorization: $greenlake_token" "{{ GREENLAKE_API_CLIENT_URL}}/v1alpha2/assignments?roleId=$ret1&spaceId={{ GREENLAKE_HACKSHACK_SPACE_ID }}&subjects=clients/$ret2" |jq -r .members[].id) 
	echo "Assignment is $ret3"

	# Delete Assignment
	ret4=$(curl -X DELETE --header "Authorization: $greenlake_token" "{{ GREENLAKE_API_CLIENT_URL}}/v1alpha2/assignments/$ret3")
	
	# Delete Student Client API
	ret5=$(curl -i -X DELETE --header "Authorization: $greenlake_token" "{{ GREENLAKE_API_CLIENT_URL}}/v1beta1/clients/$ret2")
	echo "$ret5 : API Client for Student$stdid deleted"
}


# This function creates an Aruba Central Token
generate_aruba_token() {

	# Authenticate a User and Create a User Session
	ret1=$(curl -s --location --request POST {{ ARUBA_AUTHENTICATION_USER_URL }}client_id={{ ARUBA_CLIENTID }} \
  	-H 'Content-Type: application/json' \
  	-d '{
   	"username": "{{ ARUBA_TOKEN_USERNAME }}",
    	"password": "{{ ARUBA_TOKEN_PASSWORD }}",
	}' | jq -r '.access_token')
	echos "csrftoken=$ret1"

	 # Get customer /  Tenant ID
        ret2=$(curl -s --location --request GET --header "Authorization: $aruba_token" "{{ ARUBA_AUTHENTICATION_TOKEN_URL }}/msp_api/v1/customers/customer_name=student$stdid" \
                -H 'Content-Type: application/json' | jq -r .customers[]customer_id)
        echo "Customer student$stdid  customer_id is $ret2"

	
	# Generate Authorization Code
	ret3=$(curl -s "{{ ARUBA_AUTHENTICATION_USER_URL }}client_id={{ ARUBA_CLIENTID }}&response_type=code&scope=all HTTP/1.1" \
	-H 'Content-Type: application/json' \
	-H Accept: application/json Cookie: “$ret1"" \
	-d "{
	\"customer_id\": $ret2,
 	}" | jq -r )
	echo "authorization code is $ret3"

	# Generate Aruba Token
	ret4=$(curl -s --location --request POST {{ ARUBA_AUTHENTICATION_TOKEN_URL }}client_id={{ ARUBA_CLIENTID }}&client_secret={{ ARUBA_CLIENTSECRET }}&grant_type=authorization_code&code=$ret3 \
		-H 'Content-Type: application/json' | jq -r )
	echo "Aruba Token is $ret4"

	export aruba_token=$ret4
	
}

# this function onboards an Aruba customer to Aruba Central
onboard_aruba_customer() {


	# Get customer /  Tenant ID
	ret2=$(curl -s --location --request GET --header "Authorization: $aruba_token" "{{ ARUBA_AUTHENTICATION_TOKEN_URL }}/msp_api/v1/customers/customer_name=student$stdid" \
		-H 'Content-Type: application/json' | jq -r .customers[]customer_id)
	echo "Customer student$stdid  customer_id is $ret2"

	# Add user to newly created customer (based on student name and email ID) (Additional header to use MSP evel token for tenant API call)
	ret3=$(curl -s --location --request POST --header "Authorization: $aruba_token" "{{ ARUBA_AUTHENTICATION_TOKEN_URL }}/platform/rbac/v1/users"
		-H  "TenantID: $ret2"
		-d "{
		\"username\": \"student$stdid@hpedev.io\",
		\"password\": \"$randompw\",
		\"description\": \"Hackshack student\",
		\"name\": {
			\"firstname\": \"student$stdid\",
			\"lastname\": \"student\"
		},
		\"phone\": \"+1-9998880000\",
		\"address\": {
			\"street\": \"3333 Scott Blvd\",
			\"city\": \"Santa Clara\",
			\"state\": \"California\",
			\"country\": \"US\",
			\"zipcode\": \"95054\"
		}	,
		\"applications\": [{
				\"name\": \"nms\",
				\"info\": [{
					\"role\": \"readwrite\",
					\"scope\": {
						\"groups\": [
							\"allgroups\"
					]	
					}
				}]
		},
		{
				\"name\": \"account_setting\",
				\"info\": [{
					\"role\": \"readwrite\"
				}]
		}
G	]
	}")

	echo "Customer $customer_email Created"
}

# This function deletes an Aruab Customer from Aruba Central
delete_aruba_customer() {

	# Get customer  /Tenant ID
        ret1=$(curl -s --location --request GET --header "Authorization: $aruba_token" "{{ ARUBA_AUTHENTICATION_TOKEN_URL }}/msp_api/v1/customers/customer_name=student$stdid" \
                -H 'Content-Type: application/json' | jq -r .customers[]customer_id)
        echo "Customer student$stdid  customer_id is $ret1"


	# Delete Aruba User
	#ret2=$(curl -s --location --request DELETE --header "Authorization: $aruba_token" "{{ ARUBA_AUTHENTICATION_TOKEN_URL }}/msp_api/v1/customers/$ret1")
	
	#echo "$ret2 : Aruba Customer  for Student$stdid deleted"

}


# This function updates the LDAP passwd with $randompw for the student under management (using $stdid)
update_ldap_passwd() {

	# define that variable to overload the student name (used by sec-student e.g.)
	if [ _"$LDAPSETUPUSER" = _"" ]; then
		LDAPSETUPUSER="student"
	fi
	rm -f /tmp/ldif.$$
	cat > /tmp/ldif.$$ << EOF

# modify user password
dn: uid=$LDAPSETUPUSER$stdid,ou=People,{{ LDAPDMN }}
changetype: modify
replace: userPassword
userPassword: $randompw
EOF
	ldapmodify -D "cn=Directory Manager" -w {{ LDAPPWD }} -p {{ LDAPPORT }} -h {{ LDAPSRV.split(' ')[1] }} -x -f /tmp/ldif.$$
	rm -f /tmp/ldif.$$
}

# This function creates a variable file in which password is stored from the ansible playbook with $randompw
create_var_passwd() {
  
	if [ ! -d "{{ JUPPROC }}/ansible-jupyter/$PBKDIR/pass" ]; then
		mkdir -p {{ JUPPROC }}/ansible-jupyter/$PBKDIR/pass
	fi
	ansible-vault encrypt_string --vault-password-file {{ JUPPROC }}/ansible-jupyter/vault_secret $randompw --name "'PASSSTU'" > {{ JUPPROC }}/ansible-jupyter/$PBKDIR/pass/variables_${w}_${stdid}.yml
}

# This function retuns the workshop name from the mail body
get_workshop_name() {

	read w
	if [ ! -n "$w" ]; then
		echo "Missing workshop name in the e-mail body"
		exit -1
	fi
	if [ ! -d "$std0/$w" ]; then
		echo "Non-existant workshop $w"
		exit -1
	fi
	echo "$w"
}

erase_student() {

	if [ _"$stddir" != _"" ]; then
		echo "Erasing target student dir $stddir content"
		sudo rm -rf $stddir/* $stddir/.??*
		sudo cp -a {{ JUPPROC }}/skel/.??* $stddir
		sudo chown -R student${stdid}:student${stdid} $stddir/.??*
		echo "Create ssh keys to allow remote connections to appliance if needed"
		sudo su - student${stdid} -c "ssh-keygen -b 2048 -t rsa -f .ssh/id_rsa -N ''"
	fi
}

# This function creates a random password for a user, it is used for local and ldap users'passwords.
generate_randompwd() {

	if [ _"$RANDOMPW" != _"" ]; then
		export randompw=$RANDOMPW
	else
		export randompw=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
	fi
	echo "student$stdid:$randompw" | sudo chpasswd
}


# This function calculates a completion ratio at the end of a  workshop-on-demand.
get_wod_completion_ratio() {

	cd $stddir/
	when=$(date +"%Y-%m-%d %H:%m:%S")
	what=$(ls | grep WKSHP)
	who=student$stdid
	total=$(grep execution_count $what/*.ipynb  | wc -l)
	missed=$(grep execution_count $what/*.ipynb  | grep null | wc -l)
	done=$((total-missed))
	completion=$((done*100/total))
	#echo "date:$when,user:$who,workshop:$what,completion:$completion%"
	echo "$completion"
}


# Cleanup remaining processes for that student after the run
cleanup_processes_student() {
	ids=`ps auxww | grep /student$stdid | grep -v grep | awk '{ print $2 }'`
	if [ _"$ids" != _"" ]; then
		sudo kill $ids
	fi
}
