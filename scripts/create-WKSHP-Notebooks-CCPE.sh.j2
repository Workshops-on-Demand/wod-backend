#!/bin/bash

set -x

source {{ SCRIPTDIR }}/functions.sh

# Change to its own appliance when in production
export RTARGET={{ hostvars[inventory_hostname]['IP-WKSHP-Notebooks-CCPE'] }}
# Start by cleaning up stuff - do it early as after we setup .ssh content
{{ SCRIPTDIR }}/reset-$ws.sh
{{ SCRIPTDIR }}/create-appliance.sh

NAME=ccpelab
TMPDIR=/tmp/$NAME.$stdid

mkdir -p $TMPDIR

# Get apps
cp -a $std0/$w/apps.tar.gz $TMPDIR

cat > $TMPDIR/entrypoint.sh << EOF
#!/bin/bash
/usr/sbin/sshd
sleep infinity
EOF

cat > $TMPDIR/profile.ccpe << EOF
#doesn't work with the ssh kernel
#source /usr/local/Modules/init/bash
export MODULEPATH=/opt/cray/pe/perftools/20.12.0.2/modulefiles:/usr/local/Modules/modulefiles:/opt/cray/pe/cpe-prgenv/7.0.0/modules:/opt/cray/pe/modulefiles:/opt/cray/pe/craype-targets/1.4.0/modulefiles:/opt/modulefiles:/opt/cray/modulefiles
export MODULEPATH=$MODULEPATH:/opt/cray/pe/craype/2.7.9/modulefiles
export MODULEPATH=$MODULEPATH:/opt/spack/share/spack/modules
EOF

cat > $TMPDIR/Dockerfile << EOF
FROM cray/hpe_cpe_lab:1.5
USER root
RUN mkdir -p /student
RUN useradd -m -d /student/student$stdid student$stdid 
# Used: perl -e 'use Crypt::PasswdMD5; print crypt("Redfish@TSS19", "\$6\$rl1WNGdr\$"),"\n"' to create the Password
# Unlock the account
RUN perl -pi -e "s|^student$stdid:!:|student$stdid:\$6\$rl1WNGdr\$qHyKDW/prwoj5qQckWh13UH3uE9Sp7w43jPzUI9mEV6Y1gZ3MbDDMUX/1sP7ZRnItnGgBEklmsD8vAKgMszkY.:|" /etc/shadow
RUN echo "student$stdid   ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers
WORKDIR /student/student$stdid
RUN mkdir .ssh
RUN chmod 700 .ssh
COPY authorized_keys .ssh
RUN chmod 600 .ssh/authorized_keys
RUN chown -R student$stdid:users /student/student$stdid/.ssh
COPY entrypoint.sh /entrypoint.sh
COPY profile.ccpe /profile.ccpe
COPY apps.tar.gz /
# Fix a bug on SLES for the jupyter ssh kernel
RUN mv /etc/profile /etc/profile.sav
RUN perl -0777 -pi -e 's|$|\nsource /profile.ccpe|' /student/student$stdid/.profile
ENTRYPOINT sudo /entrypoint.sh
USER student$stdid
RUN tar xf /apps.tar.gz
EOF

echo wid=$wid
APPMIN=`get_range_min $wid`
echo stdid=$stdid
echo APPMIN=$APPMIN
sshport=$(($stdid-$APPMIN+{{ hostvars[inventory_hostname]['SSHPORT-WKSHP-Notebooks-CCPE'] }}))
webport=$(($stdid-$APPMIN+{{ hostvars[inventory_hostname]['HTTPPORT-WKSHP-Notebooks-CCPE'] }}))

# Adapt the ssh config for the student
cat > $TMPDIR/config << EOF
Host $RTARGET
    Port $sshport
EOF
sudo install -m 0600 -o student$stdid $TMPDIR/config /student/student$stdid/.ssh/

# Look at https://stackoverflow.com/questions/34264348/docker-inside-docker-container
# and http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
# For security consider using https://github.com/nestybox/sysbox
cat > $TMPDIR/docker-compose.yml << EOF
version: '3.5'
services:
  $NAME$stdid:
    image: ${NAME}$stdid
    build: .
    privileged: true
    ports:
      - "$webport:80"
      - "$sshport:22"
EOF
cat > $TMPDIR/launch-$NAME << EOF
#!/bin/bash
cd $TMPDIR
docker-compose up --build -d
EOF

# Copy content on appliance and start container
ssh -q {{ NOCHECKSSH }} $RTARGET mkdir -p $TMPDIR
ssh -q {{ NOCHECKSSH }} $RTARGET sudo cp /student/student$stdid/.ssh/authorized_keys $TMPDIR
ssh -q {{ NOCHECKSSH }} $RTARGET sudo chmod 644 $TMPDIR/authorized_keys
scp -q {{ NOCHECKSSH }} $TMPDIR/Dockerfile $TMPDIR/docker-compose.yml $TMPDIR/launch-$NAME $TMPDIR/entrypoint.sh $TMPDIR/profile.ccpe $TMPDIR/apps.tar.gz $RTARGET:$TMPDIR
ssh -q {{ NOCHECKSSH }} $RTARGET chmod 755 $TMPDIR $TMPDIR/launch-$NAME $TMPDIR/entrypoint.sh
ssh -q {{ NOCHECKSSH }} $RTARGET chmod 644 $TMPDIR/Dockerfile $TMPDIR/docker-compose.yml $TMPDIR/profile.ccpe $TMPDIR/apps.tar.gz
ssh -q {{ NOCHECKSSH }} $RTARGET sudo su - student$stdid -c $TMPDIR/launch-$NAME

# Cleanup
ssh -q {{ NOCHECKSSH }} $RTARGET rm -rf $TMPDIR
rm -rf $TMPDIR
