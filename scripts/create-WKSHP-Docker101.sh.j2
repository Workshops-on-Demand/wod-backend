#!/bin/bash

set -x

source {{ SCRIPTDIR }}/functions.sh

export RTARGET={{ hostvars[inventory_hostname]['IP-WKSHP-Docker101'] }}
{{ SCRIPTDIR }}/create-appliance.sh

NAME=dockerlab
TMPDIR=/tmp/$NAME.$stdid

mkdir -p $TMPDIR
cat > $TMPDIR/Dockerfile << EOF
FROM ${NAME}:latest
RUN useradd student$stdid -G docker
RUN echo "student$stdid   ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers
WORKDIR /student/student$stdid
USER student$stdid
RUN mkdir .ssh
RUN chmod 700 .ssh
COPY .ssh/authorized_keys .ssh
RUN chmod 600 .ssh/authorized_keys
# Used: perl -e 'use Crypt::PasswdMD5; print crypt("Redfish@TSS19", "\$6\$rl1WNGdr\$"),"\n"' to create the Password
#RUN perl -pi -e "s|^student$stdid:!:|student$stdid:\$6\$rl1WNGdr\$qHyKDW/prwoj5qQckWh13UH3uE9Sp7w43jPzUI9mEV6Y1gZ3MbDDMUX/1sP7ZRnItnGgBEklmsD8vAKgMszkY.:|" /etc/shadow
EOF

echo wid=$wid
APPMIN=`get_range_min $wid`
echo stdid=$stdid
echo APPMIN=$APPMIN
sshport=$(($stdid-$APPMIN+{{ hostvars[inventory_hostname]['SSHPORT-WKSHP-Docker101'] }}))
webport=$(($stdid-$APPMIN+{{ hostvars[inventory_hostname]['WEBPORT-WKSHP-Docker101'] }}))
cat > $TMPDIR/docker-compose.yml << EOF
version: '3.5'
services:
  $NAME$stdid:
    image: ${NAME}$stdid
    build: .
    privileged: true
    ports:
      - $webport:80
      - $sshport:22
EOF
cat > $TMPDIR/launch-$NAME << EOF
#!/bin/bash
cd $TMPDIR
docker-compose up -d
EOF

# Stop/Remove existing content first - these commands could fail so protect with true from set -e
ssh -q {{ NOCHECKSSH }} $RTARGET sudo su - student$stdid -c \'docker stop $NAME$stdid\' && /bin/true
ssh -q {{ NOCHECKSSH }} $RTARGET sudo su - student$stdid -c \'docker rm $NAME$stdid\' && /bin/true

# Copy content and start container
ssh -q {{ NOCHECKSSH }} $RTARGET mkdir -p $TMPDIR
scp -q {{ NOCHECKSSH }} $TMPDIR/Dockerfile $TMPDIR/docker-compose.yml $TMPDIR/launch-$NAME $RTARGET:$TMPDIR
ssh -q {{ NOCHECKSSH }} $RTARGET chmod 755 $TMPDIR
ssh -q {{ NOCHECKSSH }} $RTARGET chmod 644 $TMPDIR/Dockerfile $TMPDIR/docker-compose.yml $TMPDIR/launch-$NAME
ssh -q {{ NOCHECKSSH }} $RTARGET sudo su - student$stdid -c \'bash $TMPDIR/launch-$NAME\'

# Cleanup
ssh {{ NOCHECKSSH }} $RTARGET rm -rf $TMPDIR
rm -rf $TMPDIR
