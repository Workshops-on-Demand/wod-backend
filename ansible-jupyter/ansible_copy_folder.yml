# Playbook expects to have a Student0 folder in the directory where the playbook is run
- hosts: staging
  gather_facts: false
  #connection: local
  vars:
    # Change this to the number of copies you want
    #capacity: 0
    prefix: /student
    ref: /home/jupyter/student0
    playbk: /home/jupyter/ansible-jupyter
    #workshop: OVWorkshop
    #dir: TSS
    #myrange: 1-{{ capacity }}
    #parse: "{{ myrange.split('-') }}"
    #start: "{{ parse[0] }}"
    #end: "{% if parse|length > 1 %}{{ parse[1] }}{% else %}{{ start }}{% endif %}"
    #files: []

  tasks: 
    - fail:
        msg: STDID variable is empty ! Fat fingers ?!?
      when: STDID is not defined

    - fail:
        msg: WORKSHOP variable is empty ! Fat fingers ?!?
      when: WORKSHOP is not defined

    - name: check variables file exists
      stat:
        path: "{{ playbk }}/variables_{{ WORKSHOP }}.yml"
      register: variables_file
    - include_vars:
        file: "{{ playbk }}/variables_{{ WORKSHOP }}.yml"
      when: variables_file.stat.exists
  
    - name: check password file exists
      stat:
        path: "{{ playbk }}/variables_{{ WORKSHOP }}_pass.yml"
      register: pass_file
    - include_vars:
        file: "{{ playbk }}/variables_{{ WORKSHOP }}_pass.yml"
      when: pass_file.stat.exists
  
    - fail:
        msg: PASSSTU variable is empty ! Fat fingers ?!?
      when: PASSSTU is not defined

    # find all notebooks
    - name: find jupyter notebooks
      find:
        paths: "{{ ref }}/{{ DIR }}/{{ WORKSHOP }}"
        recurse: yes
        patterns: 
          - "*.ipynb"
          - "Variables.ps1"
        excludes: '*-checkpoint.ipynb'
      register: notebooks

    - name: debug
      debug: 
        msg: "{{ notebooks.files }}"

        #   - name: Cleanup Outputs, metadata and execution_count
        #shell: |
        #jq '(.cells[] | select(has("outputs")) | .outputs) = []
        #| (.cells[] | select(has("execution_count")) | .execution_count) = null
        #| .cells[].metadata = {}' "{{ item.path }}" | sponge "{{ item.path }}"
        #with_items: "{{ notebooks.files }}"
        #when: item.path is not search("Variables.ps1")
 
    # Synchronize target students with student0 Workshop content
    - name: synchronize master folder
      ansible.posix.synchronize:
        src: "{{ ref }}/{{ DIR }}/{{ WORKSHOP }}/"
        dest: "{{ prefix }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        rsync_opts: 
          - "--exclude=*.ipynb --exclude=Variables.ps1"

      #- name: debug
      #debug:
      #msg: "PASSSTU:{{ PASSSTU }}"

    - name: Deliver notebooks as ansible template for variable expansion
      template:
        src: "{{ item.path }}"
        dest: "{{ item.path | regex_replace(ref, prefix + '/student' + STDID) }}"
      with_items: "{{ notebooks.files }}"

    - name: Adapt owner/group/modes for target workshop
      become: yes
      become_user: root
      file:
        path: '{{ prefix }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}'
        owner: student{{ STDID }}
        group: student{{ STDID }}
        mode: u+rwx
      
    - name: setup acl for the Workshop
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "{{ prefix }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        #default: yes
        state: present
