- hosts: all
  gather_facts: true

  tasks: 
    - name: Ensure that required packages are installed for repo setup
      become: yes
      become_user: root
      apt:
        pkg:
        - apt-transport-https
        - curl
        - gnupg2

    - name: Update apt cache
      become: yes
      become_user: root
      apt:
        update_cache: yes
      changed_when: False

    - name: Add universe repository into sources list
      become: yes
      become_user: root
      apt_repository:
        repo: deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }}-security universe
        state: present

    - name: Add conda GPG Key to APT
      become: yes
      become_user: root
      apt_key:
        url: https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc
        state: present

    - name: Add conda APT repository
      become: yes
      become_user: root
      apt_repository:
        repo: deb [arch=amd64] https://repo.anaconda.com/pkgs/misc/debrepo/conda stable main
        state: present

    - name: Add K8s GPG Key to APT
      become: yes
      become_user: root
      apt_key:
        url: https://packages.cloud.google.com/apt/doc//apt-key.gpg.asc
        state: present

    - name: Add K8s APT repository
      become: yes
      become_user: root
      apt_repository:
        #repo: deb https://apt.kubernetes.io/ kubernetes-{{ ansible_distribution_release }} main
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Remove MicroSoft repo package
      become: yes
      become_user: root
      apt:
        pkg: 
        - packages-microsoft-prod.deb
        state: absent

    - name: Setup MicroSoft repo
      become: yes
      become_user: root
      apt:
        deb: https://packages.microsoft.com/config/ubuntu/{{ ansible_distribution_version }}/packages-microsoft-prod.deb

    - name: Update apt cache
      become: yes
      become_user: root
      apt:
        update_cache: yes
      changed_when: False

    - name: Ensure all required packages are installed
      become: yes
      become_user: root
      apt:
        pkg:
        - ansible 
        - python3 
        - python3-dev 
        - python3-pip 
        - python3-venv 
        - python3-jmespath 
        - python3-virtualenv 
        - git 
        - acl 
        - curl 
        - wget 
        - bzip2 
        - firefox 
        - jq 
        - httpie 
        - apt-file 
        - moreutils 
        - net-tools 
        - ldap-utils
        - nodejs
        - npm
        - vim
        - pandoc
        - clang
        - cargo
        - cmake
        - default-jre
        - default-jdk
        - golang
        - texlive-xetex 
        - texlive-fonts-recommended 
        - texlive-latex-recommended
        - aspnetcore-runtime-3.1
        - dotnet-runtime-3.1
        - dotnet-sdk-3.1
        - software-properties-common
        - gnupg2 
        - postfix 
        - procmail 
        - conda 
        - kubectl 
        - lld
        - libzmq3-dev

    - name: Ensure all required node.js packages are installed
      become: yes
      become_user: root
      community.general.npm:
        name: "{{ item }}"
        global: yes
      with_items:
        - json
        - configurable-http-proxy

    - name: Remove a set of existing pip packages
      pip:
        name:
        - wheel 
        - jupyterhub 
        - jupyterlab 
        - nbconvert
        - pyhpecfm==0.1.6
        - hpeOneView
        - ipywidgets
        - ansible-kernel
        - bash_kernel
        - powershell_kernel
        - rust-magic
        state: absent
        virtualenv: "{{ JPHUB }}"
      when: CLEAN|bool
      ignore_errors: true

    - name: Remove directory "{{ JPHUB }}"
      become: yes
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: absent
      when: CLEAN|bool

    - name: Create directory "{{ JPHUB }}" if needed
      become: yes
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Ensure all required rust packages are installed
      command: cargo install cargo-script

    - name: Ensure all required pip packages are installed
      pip:
        name:
        - wheel 
        - jupyterhub 
        - jupyterlab 
        - nbconvert
        - pyhpecfm==0.1.6
        - hpeOneView
        - ipywidgets
        - ansible-kernel
        - bash_kernel
        - powershell_kernel
        - rust-magic
        state: present
        virtualenv: "{{ JPHUB }}"

    - name: Ensure Go kernel is installed
      shell: env GO111MODULE=off go get -d -u github.com/gopherdata/gophernotes && cd "{{ ansible_env.HOME }}/go/src/github.com/gopherdata/gophernotes" && env GO111MODULE=on go install && mkdir -p {{ JPHUB }}/share/jupyter/kernels/gophernotes && cp kernel/* {{ JPHUB }}/share/jupyter/kernels/gophernotes

    - name: Make gophernotes available under /usr/local/bin with a symlink
      become: yes
      become_user: root
      file:
        src: "{{ ansible_env.HOME }}/go/bin/gophernotes"
        dest: /usr/local/bin/gophernotes
        owner: jupyter
        group: jupyter
        state: link

    - name: Ensure jupyter kernels are installed
      shell: . '{{ JPHUB }}/bin/activate' && python3 -m "{{ item }}.install" --prefix={{ JPHUB }}
      with_items:
        - bash_kernel
        - powershell_kernel
        - ansible_kernel
      changed_when: False

    - name: Test pwsh presence
      command: ls "{{ ansible_env.HOME }}/.dotnet/tools/pwsh"
      register: pwsh_path
      ignore_errors: true
      changed_when: false
    
    - name: Ensure powershell is installed through dotnet
      command: dotnet tool install -g powershell
      when: pwsh_path.rc != 0
    
    - name: Make pwsh available under /usr/local/bin with a symlink
      become: yes
      become_user: root
      file:
        src: "{{ ansible_env.HOME }}/.dotnet/tools/pwsh"
        dest: /usr/local/bin/pwsh
        owner: jupyter
        group: jupyter
        state: link
    
    - name: Ensure powershell scripts are installed
      command: "{{ SCRIPTDIR }}/install_PwshModules.sh"
    
    - name: Ensure that directory "{{ JPHUB }}/etc/jupyterhub" exists
      file:
        path: "{{ JPHUB }}/etc/jupyterhub"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Remove jupyterhub configuration file
      file:
        path: "{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py"
        state: absent

    - name: Generate jupyterhub configuration
      command: "{{ JPHUB }}/bin/jupyterhub --generate-config"
      args:
        chdir: "{{ JPHUB }}/etc/jupyterhub/"

    - name: Adapt jupyterhub configuration file
      blockinfile:
        path: "{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py"
        block: |
          #####################################################################################
          c.Authenticator.admin_users = {'jupyter'}
          c.Authenticator.whitelist = {'jupyter'}
          c.Spawner.default_url = '/lab'
          c.JupyterHub.tornado_settings = {'cookie_options': {'expires_days': 0.17}}
          c.JupyterHub.shutdown_on_logout = True
          c.JupyterHub.redirect_to_server = True
          #####################################################################################

    - name: Copy jupyterhub service file 
      become: yes
      become_user: root
      copy:
        src: "{{ JUPPROC }}/jupyterhub.service"
        dest: /etc/systemd/system/jupyterhub.service

    - name: Enable Jupyterhub service 
      become: yes
      become_user: root
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes
        name: jupyterhub

    - name: Test Jupyterhub token
      get_url: 
        url: "{{ JPHUBAPISRV }}/hub/api/users/jupyter"
        dest: /dev/null
        headers:
          Authorization: "token {{ JPHUBTOKEN }}"
      register: answer
      ignore_errors: true
      changed_when: false

    - name: Build a new Jupyterhub token
      shell: . '{{ JPHUB }}/bin/activate' && '{{ JPHUB }}/bin/jupyterhub' token jupyter -f '{{ JPHUB }}/etc/jupyterhub/jupyterhub_config.py' | tail -1
      register: jup_token
      ignore_errors: true
      changed_when: false
      when: answer.status_code != 200

    - name: Fix Jupyter token in conf file
      lineinfile:
        path: "{{ JUPPROC }}/ansible-jupyter/group_vars/{{ PBKDIR }}"
        regexp: "^JPHUBTOKEN"
        line: "JPHUBTOKEN: {{ jup_token.stdout_lines[0] }}"
        state: present
      when: answer.status_code != 200

    - name: Enable postfix service 
      become: yes
      become_user: root
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes
        name: postfix

    # For this to work, you need to have a key used in deploy key of the projects
    - name: Checkout notebooks from the jupyter-notebook git repo
      git:
        repo: git@github.com:HPEDevCom/jupyter-notebooks.git
        dest: "{{ ansible_env.HOME }}/student0"
        key_file: "{{ ansible_env.HOME }}/.ssh/id_student0"
