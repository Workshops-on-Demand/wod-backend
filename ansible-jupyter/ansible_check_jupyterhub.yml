- hosts: all
  gather_facts: true

  tasks: 
    - name: Ensure correct nproc soft limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: soft
        limit_item: nproc
        value: "800000"

    - name: Ensure correct nproc hard limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: hard
        limit_item: nproc
        value: "800000"

    - name: Ensure correct nofile soft limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: soft
        limit_item: nofile
        value: "65535"

    - name: Ensure correct nofile hard limits
      become: yes
      become_user: root
      community.general.pam_limits:
        domain: jupyter
        limit_type: hard
        limit_item: nofile
        value: "65535"

    - name: Setup sysctl params
      become: yes
      become_user: root
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_set: yes
      with_items:
        - { key: "net.ipv4.tcp_keepalive_time", value: "1800" }
        - { key: "kernel.threads-max", value: "4096000" }
        - { key: "kernel.pid_max", value: "200000" }
        - { key: "vm.max_map_count", value: "600000" }

    - name: Setup firewall rules
      become: yes
      become_user: root
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
        state: enabled
      with_items:
        - "8000"
        - "443"
        - "80"
        - "22"
        - "{{POSTPORT}}"

    - name: Ensure limits are correct for jupyter account
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "{{ item }}"
      with_items:
        - "ulimit -u 641465"
        - "ulimit -n 65535"

    - name: Test .profile file
      command: ls "{{ ansible_env.HOME }}/.profile"
      register: profile_path
      ignore_errors: true
      changed_when: false
    
    - name: Ensure we have a .profile file
      copy:
        src: /etc/skel/.profile
        dest: "{{ ansible_env.HOME }}/.profile"
      when: profile_path.rc != 0
  
    - name: Ensure vim is the default EDITOR
      lineinfile:
        path: "{{ ansible_env.HOME }}/.profile"
        line: export EDITOR=vim

    - name: Setup logind.conf
      become: yes
      become_user: root
      lineinfile:
        path: /etc/systemd/logind.conf
        line: UserTasksMax=100000
        state: present

    - name: Fix localhost entry in /etc/hosts
      become: yes
      become_user: root
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.0\.1'
        line: 127.0.0.1 localhost localhost.localdomain
        owner: root
        group: root
        mode: '0644'
        state: present

    - name: Ensure we have relevant entries in /etc/hosts
      become: yes
      become_user: root
      lineinfile:
        path: /etc/hosts
        line: "{{ item }}"
        owner: root
        group: root
        mode: '0644'
        state: present
      with_items:
        - "{{ JPIP }} {{ JPHOST }} {{ JPHOST.split('.')[0] }}  {{ JPHOSTEXT }} {{ JPHOSTEXT.split('.')[0] }}"
        - "{{ REDFISHILO }}"
        - "{{ REDFISHOBMC }}"
        - "{{ HPEECPCTRL1 }}"
        - "{{ HPEECPCTRL2 }}"
        - "{{ HPEECPGW1 }}"
        - "{{ HPEECPGW2 }}"
        - "{{ LDAPSRV }}"

    - name: Create directory "{{ JPHUB }}" if needed
      become: yes
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Ensure that directory "{{ JPHUB }}/etc/jupyterhub" exists
      file:
        path: "{{ JPHUB }}/etc/jupyterhub"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Enable Jupyterhub service 
      become: yes
      become_user: root
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes
        name: jupyterhub

    - name: Ensure listening port in postfix master.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/master.cf
        regex: '^smtp\s*inet'
        line: '{{ POSTPORT }}      inet  n       -       y       -       -       smtpd'
        state: present

    - name: Ensure myhostname in postfix main.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^myhostname ='
        line: "myhostname = {{ JPHOST }}"
        state: present

    - name: Ensure mydestination in postfix main.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^mydestination ='
        line: "mydestination = $myhostname, {{ JPHOST.split('.')[0] }}, {{ JPHOSTEXT }}, {{ JPHOSTEXT.split('.')[0] }}, localhost, localhost.localdomain"
        state: present

    - name: Deploy an instanciated procmailrc conf file
      template:
        src: "{{ JUPPROC }}/procmailrc.j2"
        dest: "{{ ansible_env.HOME }}/.procmailrc"
        mode: 0600

    - name: Deploy an instanciated procmail-action script
      template:
        src: "{{ SCRIPTDIR }}/procmail-action.sh.j2"
        dest: "{{ SCRIPTDIR }}/procmail-action.sh"
        mode: 0700

    - name: Deploy an instanciated test-action script
      template:
        src: "{{ SCRIPTDIR }}/test-action.sh.j2"
        dest: "{{ SCRIPTDIR }}/test-action.sh"
        mode: 0700

    - name: Enable postfix service 
      become: yes
      become_user: root
      systemd:
        state: started
        daemon_reload: yes
        enabled: yes
        name: postfix

    - name: Install the pkg update script
      become: yes
      become_user: root
      copy:
        src: "{{ SCRIPTDIR }}/upd"
        dest: /usr/local/bin/upd
        owner: root
        group: root
        mode: 0700

    - name: Setup crontab for daily pkg security update
      become: yes
      become_user: root
      cron:
        name: upd
        minute: "{{ 60 | random }} "
        hour: 03
        user: root
        job: "/usr/local/bin/upd"
        cron_file: upd
        state: present

    - name: Deliver reset scripts as ansible template for variable expansion
      template: src={{ item }} dest={{ SCRIPTDIR }}/{{ item | basename | regex_replace('\.j2$') }} mode=0755
      with_fileglob: [ '{{ SCRIPTDIR }}/reset-*.sh.j2' ]

    - name: Ensure that directory /student exists
      become: yes
      become_user: root
      file: 
        path: "/student"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0711

    - name: Lockdown /home
      become: yes
      become_user: root
      file:
        path: "/home"
        state: directory
        owner: root
        group: root
        mode: 0711

    - name: Ensure that directory {{ ansible_env.HOME }}/.mail exists
      file:
        path: "{{ ansible_env.HOME }}/.mail"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0750

    - name: Ensure that file vault_secret in {{ JUPPROC }}/ansible-jupyter/ exists 
      shell: echo '{{ VAULTPWD }}' > "{{ JUPPROC }}/ansible-jupyter/vault_secret"
   
    - name: Fix modes for {{ JUPPROC }}/ansible-jupyter/vault_secret
      file: 
        path: "{{ JUPPROC }}/ansible-jupyter/vault_secret"
        mode: 0600

    - name: Fix git config for future commit on student0
      lineinfile:
        path: "{{ ansible_env.HOME }}/student0/.git/config"
        line: "sshCommand = ssh -i ~/.ssh/id_student0 -F /dev/null"
        insertafter: '^\s+logallrefupdates'

    - name: Fix git config for future commit on ju≈∑ter-procmail
      lineinfile:
        path: "{{ JUPPROC }}/.git/config"
        line: "sshCommand = ssh -i ~/.ssh/id_jupproc -F /dev/null"
        insertafter: '^\s+logallrefupdates'

    - name: Remove existing jupyter users
      command: 
        cmd: "curl -X DELETE --silent -k -H 'Authorization: token {{ JPHUBTOKEN }}' {{ JPHUBAPISRV }}/hub/api/users/{{ 'student%s' | format(item) }}"
        warn: false
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
      when: CLEAN|bool

    - name: Remove Linux users and their home directory
      become: yes
      become_user: root
      user:
        name: "{{ 'student%s' | format(item) }}"
        state: absent
        remove: yes  
        force: yes
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
      when: CLEAN|bool

    - name: Ensure dedicated students groups exist
      become: yes
      become_user: root
      group:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        gid: "{{ item + GIDBASE }}"
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Ensure Linux students users exists with their home dir
      become: yes
      become_user: root
      user:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        create_home: true
        home: "/student/{{ 'student%s' | format(item) }}"
        comment: "{{ 'student%s' | format(item) }}"
        shell: /bin/bash
        uid: "{{ item + UIDBASE }}"
        group: "{{ 'student%s' | format(item) }}"
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
    
    - name: Ensure jupyter students users exist
      command: 
        cmd: "curl -X POST --silent -k -H 'Authorization: token {{ JPHUBTOKEN }}' {{ JPHUBAPISRV }}/hub/api/users/{{ 'student%s' | format(item) }}"
        warn: false
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Setup ACL for students with jupyter account
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "/student/{{ 'student%s' | format(item) }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        state: present
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Setup default ACL for students with jupyter account
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "/student/{{ 'student%s' | format(item) }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        default: yes
        state: present
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
