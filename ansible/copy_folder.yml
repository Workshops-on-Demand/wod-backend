# Playbook expects to have a Student0 folder in the directory where the playbook is run
# # All variables in upper case come from the procmail-action.sh script
- hosts: all
  gather_facts: true
  vars:
    VARDIR: "{{ ANSIBLEDIR }}/{{ PBKDIR }}"

  tasks:
    - fail:
        msg: STDID variable is empty ! Fat fingers ?!?
      when: STDID is not defined

    - fail:
        msg: WORKSHOP variable is empty ! Fat fingers ?!?
      when: WORKSHOP is not defined

    - fail:
        msg: CHALLENGE variable is empty ! Fat fingers ?!?
      when: CHALLENGE is not defined

    - fail:
        msg: PBKDIR variable is empty ! Fat fingers ?!?
      when: PBKDIR is not defined

    - name: check VARDIR exists
      file:
        path: "{{ VARDIR }}/pass"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: check variables file exists
      stat:
        path: "{{ VARDIR }}/variables_{{ CHALLENGE }}.yml"
      ignore_errors: true
      register: variables_file

    - include_vars:
        file: "{{ VARDIR }}/variables_{{ CHALLENGE }}.yml"
      when: variables_file.stat.exists

    - name: check GreenLake API CLient variables file exists
      stat:
        path: "{{ ansible_env.HOME }}/tmp/ac-student{{ STDID }}.yml"
      ignore_errors: true
      register: greenlake_api_client_file

    - include_vars:
        file: "{{ ansible_env.HOME }}/tmp/ac-student{{ STDID }}.yml"
      when: greenlake_api_client_file.stat.exists

    - name: check password file exists
      stat:
        path: "{{ VARDIR }}/pass/variables_{{ CHALLENGE }}_{{ STDID }}.yml"
      ignore_errors: true
      register: pass_file

    - include_vars:
        file: "{{ VARDIR }}/pass/variables_{{ CHALLENGE }}_{{ STDID }}.yml"
      when: pass_file.stat.exists

    # find all notebooks
    - name: find jupyter notebooks
      find:
        paths: "{{ JUPNOBO }}/{{ DIR }}/{{ WORKSHOP }}"
        recurse: yes
        # Add other file types to process them as ansible templates
        patterns:
          - "*.ipynb"
          - "*.yaml"
          - "*.py"
          - "*.sh"
          - "*.src"
          - "*.tf"
          - "Variables.ps1"
        excludes: '*-checkpoint.ipynb'
      register: notebooks

    # find all private notebooks
    - name: find jupyter private notebooks
      find:
        paths: "{{ JUPPRIVNOBO }}/{{ DIR }}/{{ WORKSHOP }}"
        recurse: yes
        # Add other file types to process them as ansible templates
        patterns:
          - "*.ipynb"
          - "*.yaml"
          - "*.py"
          - "*.sh"
          - "*.src"
          - "Variables.ps1"
        excludes: '*-checkpoint.ipynb'
      register: notebookspriv

    - name: debug
      debug:
        msg: "{{ notebooks.files }}"

    - name: debug
      debug:
        msg: "{{ notebookspriv.files }}"

        #- name: debug
        #debug:
        #msg: "{{ ansible_facts }}"


        #- name: debug
        #debug:
        #msg: "{{ OVIP }}"

        #- name: debug-OVIP
        #debug:
        #msg: "{{ item.key }} => {{ item.value }}"
        #with_dict: "{{ OVIP }}"
        #when: "{{ STDID }} == {{ item.key }}"

        #   - name: Cleanup Outputs, metadata and execution_count
        #shell: |
        #jq '(.cells[] | select(has("outputs")) | .outputs) = []
        #| (.cells[] | select(has("execution_count")) | .execution_count) = null
        #| .cells[].metadata = {}' "{{ item.path }}" | sponge "{{ item.path }}"
        #with_items: "{{ notebooks.files }}"
        #when: item.path is not search("Variables.ps1")

    - name: Purge potential remaining workshop (no CLEANUP done)
      become: yes
      become_user: root
      file:
        path: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        state: absent

    - name: Create workspace directory for jupyter
      become: yes
      become_user: root
      file:
        path: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/.jupyter/lab/workspaces"
        state: directory
        owner: student{{ STDID }}
        group: student{{ STDID }}
        mode: 0751
        recurse: true

    - name: Deliver workspace setup to point to README
      become: yes
      become_user: root
      template:
        src: "{{ JUPPROC }}/lab-a511.jupyterlab-workspace.j2"
        dest: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/.jupyter/lab/workspaces/default-37a8.jupyterlab-workspace"
        owner: student{{ STDID }}
        group: student{{ STDID }}
        mode: 0644

    - name: Verif whether we have a Workshop content
      command: ls "{{ JUPNOBO }}/{{ DIR }}/{{ WORKSHOP }}/"
      register: nobo_path
      failed_when: false
      changed_when: false

    - name: Synchronize target students with Notebooks Workshop content
      ansible.posix.synchronize:
        src: "{{ JUPNOBO }}/{{ DIR }}/{{ WORKSHOP }}/"
        dest: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        rsync_opts:
          - "--exclude=*.ipynb --exclude=*.py --exclude=Variables.ps1"
      when:
        - nobo_path.rc == 0

    - name: Verif whether we have a private Workshop content
      command: ls "{{ JUPPRIVNOBO }}/{{ DIR }}/{{ WORKSHOP }}/"
      register: nobopriv_path
      failed_when: false
      changed_when: false

    - name: Synchronize target students with private Notebooks Workshop content
      ansible.posix.synchronize:
        src: "{{ JUPPRIVNOBO }}/{{ DIR }}/{{ WORKSHOP }}/"
        dest: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        rsync_opts:
          - "--exclude=*.ipynb --exclude=*.py --exclude=Variables.ps1"
      when:
        - nobopriv_path.rc == 0

      #- name: debug
      #debug:
      #msg: "PASSSTU:{{ PASSSTU }}"

    - name: Deliver notebooks as ansible template for variable expansion
      template:
        src: "{{ item.path }}"
        dest: "{{ item.path | regex_replace(JUPNOBO, STUDDIR + '/student' + STDID) }} | regex_replace(JUPPRIVNOBO, STUDDIR + '/student' + STDID) }}  "
      with_items: "[{{ notebooks.files }}, {{ notebookspriv.files }}] "

    - name: Create a checkpoint directory
      file:
        path: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}/.ipynb_checkpoints"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Copy the generate-pdf script in the workshop dir
      become: yes
      become_user: root
      copy:
        src: "{{ SCRIPTDIR }}/generate-pdf.sh"
        dest: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}/generate-pdf.sh"
        owner: student{{ STDID }}
        group: student{{ STDID }}
        mode: 0755

    - name: Create a checkpoint file for the user
      copy:
        src: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}/0-ReadMeFirst.ipynb"
        dest: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}/.ipynb_checkpoints/0-ReadMeFirst-checkpoint.ipynb"
        owner: jupyter
        group: jupyter
        mode: 0644

    - name: Adapt owner/group/modes for target workshop
      become: yes
      become_user: root
      file:
        path: '{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}'
        owner: student{{ STDID }}
        group: student{{ STDID }}
        recurse: yes
        mode: u+rwx

    - name: setup ACL for the Workshop
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        state: present

    - name: setup default ACL for the Workshop
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "{{ STUDDIR }}/student{{ STDID }}/{{ DIR }}/{{ WORKSHOP }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        default: yes
        state: present
