- hosts: all
  gather_facts: true

  tasks:    
    - name: Ensure that this a compliant WoD system
      include_tasks: {{ ANSIBLEDIR }}/check_system.yml

    - name: Setup backend ufw firewall TCP rules
      become: yes
      become_user: root
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
        state: enabled
      with_items:
        - "8000"
        - "443"
        - "80"
        - "{{POSTPORT}}"
      when:
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_major_version >= "20"

    - name: Setup backend firewalld TCP rules
      become: yes
      become_user: root
      ansible.posix.firewalld:
        port: "{{ item }}/tcp"
        permanent: yes
        state: enabled
      with_items:
        - "8000"
        - "443"
        - "80"
        - "{{POSTPORT}}"
      when:
        - ansible_distribution == "CentOS"
        - ansible_distribution_major_version >= "7"

    - name: Create directory "{{ JPHUB }}" if needed
      become: yes
      become_user: root
      file:
        path: "{{ JPHUB }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Ensure that directory "{{ JPHUB }}/etc/jupyterhub" exists
      file:
        path: "{{ JPHUB }}/etc/jupyterhub"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0751

    - name: Ensure listening port in postfix master.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/master.cf
        regex: '^smtp\s*inet'
        line: '{{ POSTPORT }}      inet  n       -       y       -       -       smtpd'
        state: present

    - name: Ensure myhostname in postfix main.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^myhostname ='
        line: "myhostname = {{ WODBEFQDN }}"
        state: present

    - name: Ensure listening addresses in postfix main.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^inet_interfaces ='
        line: "inet_interfaces =  {{ WODBEFQDN }},localhost"
        state: present

    - name: Ensure the mailbox command is correct
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^[#]*mailbox_command ='
        line: "mailbox_command = /usr/bin/procmail -a \"$EXTENSION\""
        state: present

    - name: Ensure mydestination in postfix main.cf is configured correctly
      become: yes
      become_user: root
      lineinfile:
        path: /etc/postfix/main.cf
        regex: '^mydestination ='
        line: "mydestination = $myhostname, {{ WODBEFQDN.split('.')[0] }}, {{ WODBEEXTFQDN }}, {{ WODBEEXTFQDN.split('.')[0] }}, localhost, localhost.localdomain"
        state: present

    - name: Deploy an instanciated procmailrc conf file
      template:
        src: "{{ WODBEDIR }}/procmailrc.j2"
        dest: "{{ ansible_env.HOME }}/.procmailrc"
        mode: 0600

    - name: Enable postfix service
      become: yes
      become_user: root
      systemd:
        state: restarted
        daemon_reload: yes
        enabled: yes
        name: postfix

    - name: Install backend utility scripts
      become: yes
      become_user: root
      template:
        src: "{{ SCRIPTDIR }}/{{ item }}.j2"
        dest: /usr/local/bin/{{ item }}
        owner: root
        group: root
        mode: 0755
      with_items:
        - check-template
        - deliver

    - name: Setup crontab for daily delivery of ansible instantiated files
      become: yes
      become_user: root
      cron:
        name: deliver
        minute: "{{ 59 | random(seed=inventory_hostname) }} "
        hour: "04"
        user: jupyter
        job: "/usr/local/bin/deliver"
        cron_file: deliver
        state: present

    - name: Setup crontab for daily check of template in dev user home dir
      become: yes
      become_user: root
      cron:
        name: check-template
        minute: "{{ 59 | random(seed=inventory_hostname) }} "
        hour: "05"
        user: root
        job: "/usr/local/bin/check-template"
        cron_file: check-template
        state: present

    - name: Deliver create/reset/setup scripts as ansible template for variable expansion
      template: src={{ item }} dest={{ SCRIPTDIR }}/{{ item | basename | regex_replace('\.j2$') }} mode=0755
      with_fileglob: [ '{{ SCRIPTDIR }}/reset-*.sh*.j2', '{{ SCRIPTDIR }}/create-*.sh*.j2', '{{ SCRIPTDIR }}/setup-*.sh*.j2', '{{ SCRIPTDIR }}/cleanup-*.sh*.j2', '{{ SCRIPTDIR }}/post-*.sh*.j2' , '{{ SCRIPTDIR }}/*.py.j2', '{{ SCRIPTDIR }}/*.pl.j2', '{{ SCRIPTDIR }}/procmail-action.sh.j2', '{{ SCRIPTDIR }}/test-action.sh.j2', '{{ SCRIPTDIR }}/functions.sh.j2', '{{ SCRIPTDIR }}/build_evcxr.sh.j2']

    - name: Deliver variables files as ansible template for variable expansion
      template: src={{ item }} dest={{ ANSIBLEDIR }}/{{ PBKDIR }}/{{ item | basename | regex_replace('\.j2$') }} mode=0644
      with_fileglob: [ '{{ ANSIBLEDIR }}/{{ PBKDIR }}/*.yml.j2' ]

    - name: Enable backend WoD services
      become: yes
      become_user: root
      systemd:
        state: restarted
        daemon_reload: yes
        enabled: yes
        name: "{{ item }}"
      with_items:
        - jupyterhub

    - name: Ensure that directory {{ STUDDIR }} exists
      become: yes
      become_user: root
      file:
        path: "{{ STUDDIR }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0711

    - name: Lockdown /home
      become: yes
      become_user: root
      file:
        path: "/home"
        state: directory
        owner: root
        group: root
        mode: 0711

    - name: Ensure that directory {{ ansible_env.HOME }}/.mail exists
      file:
        path: "{{ ansible_env.HOME }}/.mail"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0750

    - name: Ensure that file vault_secret in {{ ANSIBLEDIR }}/ exists
      lineinfile:
        path: "{{ ANSIBLEDIR }}/vault_secret"
        regexp: '^{{ VAULTPWD }}$'
        line: '{{ VAULTPWD }}'

    - name: Fix modes for {{ ANSIBLEDIR }}/vault_secret
      file:
        path: "{{ ANSIBLEDIR }}/vault_secret"
        mode: 0600

    - name: Ensure that required nbconvert directories exists
      become: yes
      become_user: root
      file:
        path: "{{ item }}"
        state: directory
        owner: jupyter
        group: jupyter
        mode: 0755
      with_items:
        - /usr/local/share/jupyter/nbconvert/
        - /usr/local/share/jupyter/nbconvert/templates/
        - /usr/local/share/jupyter/nbconvert/templates/html/
        - /usr/local/share/jupyter/nbconvert/templates/latex/
        - "{{ JPHUB }}/share/jupyter/nbconvert/templates/html/"

    - name: Remove existing jupyter users
      command:
        cmd: "curl -X DELETE --silent -k -H 'Authorization: token {{ WODBETOKEN }}' {{ WODBEAPIURL }}/hub/api/users/{{ 'student%s' | format(item) }}"
        warn: false
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
      when: CLEAN|bool

    - name: Remove Linux users and their home directory
      become: yes
      become_user: root
      user:
        name: "{{ 'student%s' | format(item) }}"
        state: absent
        remove: yes
        force: yes
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"
      when: CLEAN|bool

    - name: Ensure dedicated students groups exist
      become: yes
      become_user: root
      group:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        gid: "{{ item + GIDBASE }}"
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Ensure Linux students users exists with their home dir
      become: yes
      become_user: root
      user:
        name: "{{ 'student%s' | format(item) }}"
        state: present
        create_home: true
        home: "{{ STUDDIR }}/{{ 'student%s' | format(item) }}"
        comment: "{{ 'student%s' | format(item) }}"
        shell: /bin/bash
        uid: "{{ item + UIDBASE }}"
        group: "{{ 'student%s' | format(item) }}"
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Ensure jupyter students users exist
      command:
        cmd: "curl -X POST --silent -k -H 'Authorization: token {{ WODBETOKEN }}' {{ WODBEAPIURL }}/hub/api/users/{{ 'student%s' | format(item) }}"
        warn: false
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Setup ACL for students with jupyter account
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "{{ STUDDIR }}/{{ 'student%s' | format(item) }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        state: present
        recalculate_mask: no_mask
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Setup default ACL for students with jupyter account
      become: yes
      become_user: root
      ansible.posix.acl:
        path: "{{ STUDDIR }}/{{ 'student%s' | format(item) }}"
        recursive: yes
        entity: jupyter
        etype: user
        permissions: rwx
        default: yes
        state: present
        recalculate_mask: no_mask
      loop: "{{ range( USERMIN, USERMAX + 1)|list }}"

    - name: Test private tasks YAML file
      command: ls "{{ ANSIBLEPRIVDIR }}/check_backend.yml"
      register: acj_path
      failed_when: false
      changed_when: false

    - name: Now call private tasks if available
      include_tasks: "{{ ANSIBLEPRIVDIR }}/check_backend.yml"
      when:
        - acj_path.rc == 0
