#!/usr/bin/perl -w
#
# Update the workshop DB to synchronize the contaent of the DB with the set of wod.yml files from workshops
# Need to be called after wod.sh and functions.sh have been sourced
# Done automatically at intall time

use strict;
use Data::Dumper;
use open ":std", ":encoding(UTF-8)"; # to avoid wide char in print msgs
# Load functions also used by the update process
use lib "$ENV{'INSTALLDIR'}";
require "functions.pl";
# COmm with the DB
use DBI;
use DBD::Pg;
use Tie::DBI;

my $h = get_wod_metada();
print Dumper($h)."\n";

my $dbh = DBI->connect("dbi:Pg:dbname=$ENV{'POSTGRES_DB'},host=localhost",
                    $ENV{'WODAPIDBUSER'},
                    $ENV{'WODAPIDBUSERPWD'},
                    {AutoCommit => 1, RaiseError => 1, PrintError => 0}
		    ) || die "Unable to connect to $ENV{'POSTGRES_DB'} $DBI::errstr";
# The AutoCommit attribute should always be explicitly set
 
# For some advanced uses you may need PostgreSQL type values:
use DBD::Pg qw(:pg_types);
 
# First we need to remove from the workshops table now missing WKSHP deleted in git
# Get full DB with keys being the name
my $hashref = $dbh->selectall_hashref("SELECT * FROM workshops", "name") || die "Unable to selectall_hashref from DB $DBI::errstr";
foreach my $w (sort(keys %$hashref)) {
	print Dumper($hashref->{$w})."\n";
	# If it doesn't exist in git
	if (! exists($h->{$w})) {
		print "We need to delete $w from the DB as non existant in git\n";
		my $sth = $dbh->prepare("DELETE * FROM workshops WHERE id = '$hashref->{$w}->{id}'") || die "Unable to prepare deletions $DBI::errstr";
          	$sth->execute() || die "Can't execute statement: $DBI::errstr";;
	}
}

# Then we need to update all fields managed in git in the workshops table
# Except capacity which should remain intact during updates
# Mono/multiappliance may not exist
# Id, sessionId and sessionType, preRequisite, createdAt and UpdatedAt should not be touched.
foreach my $w (sort(keys %$h)) {
	print Dumper($h->{$w})."\n";
	# If it doesn't exist in DB add it
	if (! exists($h->{$w})) {
my $rq = << "SQL";
INSERT INTO workshops (
SQL
		my $sth = $dbh->prepare("INSERT INTO workshops") || die "Unable to prepare insertion $DBI::errstr";
	} else {
my $rq = << "SQL";
UPDATE INTO workshops WHERE name = '$h->{$w}->{name}'
SQL
		my $sth = $dbh->prepare("UPDATE INTO workshops WHERE name = '$h->{$w}->{name}'") || die "Unable to prepare update $DBI::errstr";
	}
        $sth->execute() || die "Can't execute statement: $DBI::errstr";;
}
 
#
#$dbh->do('INSERT INTO mytable(a) VALUES (1)');
#$sth = $dbh->prepare('INSERT INTO mytable(a) VALUES (?)');
